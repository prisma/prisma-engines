// ######################################
// Readme
// ######################################
// You will notice the pattern ( X ~ Y | X )
// instead of X ~ Y?. This is because we do not
// want the concat operator ~ between X and Y
// to consume any whitespace after X, if Y is not present.

// This is how PEG grammars work:
// https://pest.rs/book/grammars/peg.html

// This is the basic syntax of Pest grammar files:
// https://pest.rs/book/grammars/syntax.html#cheat-sheet

// ######################################
// Schema - the root of all rules
// ######################################
schema = {
    SOI
    ~ NEWLINE*
    ~ (model_declaration | enum_declaration | config_block | type_alias | arbitrary_block | comment_block | empty_lines | CATCH_ALL)*
    ~ EOI
    }

// ######################################
// Model and composite types
// ######################################

// At the syntax level, models and composite types are the same.
model_declaration = { 
    (MODEL_KEYWORD | TYPE_KEYWORD)
    ~ non_empty_identifier
    ~ BLOCK_OPEN
    ~ (field_declaration | block_level_attribute | comment_block | empty_lines | BLOCK_LEVEL_CATCH_ALL)*
    ~ BLOCK_CLOSE
    }

field_declaration = {
    non_empty_identifier
    ~ LEGACY_COLON?
    ~ (field_type ~ ( "@" ~ attribute )*)?
    ~ trailing_comment?
    ~ NEWLINE
    }

// ######################################
// Field Type
// ######################################

// Pest is greedy, order is very important here.
field_type = { unsupported_optional_list_type | list_type | optional_type | legacy_required_type | legacy_list_type | base_type  }

unsupported_type = { "Unsupported(" ~ string_literal ~ ")" }
base_type = { unsupported_type | non_empty_identifier } // Called base type to not conflict with type rust keyword
unsupported_optional_list_type = { base_type ~ "[]" ~ "?" }
list_type = { base_type ~ "[]" }
optional_type = { base_type ~ "?" }
legacy_required_type = { base_type ~ "!" }
legacy_list_type = { "[" ~ base_type ~ "]" }

// ######################################
// Type Alias
// ######################################
type_alias = { TYPE_KEYWORD ~ non_empty_identifier ~ "=" ~ (base_type ~ ( "@" ~ attribute )+ | base_type)  }

// ######################################
// Configuration blocks
// ######################################
config_block = {
    (DATASOURCE_KEYWORD | GENERATOR_KEYWORD)
    ~ non_empty_identifier
    ~ BLOCK_OPEN
    ~ (key_value | comment_block | empty_lines | BLOCK_LEVEL_CATCH_ALL)*
    ~ BLOCK_CLOSE
    }
key_value = { non_empty_identifier ~ "=" ~ expression ~ NEWLINE }

// a block definition without a keyword. Is not valid. Just acts as a catch for the parser to display a nice error.
arbitrary_block = { non_empty_identifier ~ BLOCK_OPEN ~ ((!BLOCK_CLOSE ~ ANY) | NEWLINE)* ~ BLOCK_CLOSE }

// ######################################
// Enum
// ######################################
enum_declaration = {
    ENUM_KEYWORD
    ~ non_empty_identifier
    ~ BLOCK_OPEN
    ~ (enum_value_declaration | block_level_attribute | comment_block | empty_lines | BLOCK_LEVEL_CATCH_ALL)* 
    ~ BLOCK_CLOSE
    }

enum_value_declaration = {
    (non_empty_identifier ~ ( "@" ~ attribute )+ | non_empty_identifier)
    ~ trailing_comment?
    ~ NEWLINE
    }

// ######################################
// Attributes
// ######################################
block_level_attribute = { "@@" ~ attribute ~ trailing_comment? ~ NEWLINE }
// An attribute may have no arguments at all.
attribute = { attribute_name? ~ arguments_list? }
// This is a poor-mans version of name spacing. This is currently used for native types.
attribute_name = @{ (non_empty_identifier ~ ".")? ~ non_empty_identifier? }

// ######################################
// Arguments
// ######################################
arguments_list = { "(" ~ (argument ~ ("," ~ argument)*)? ~ trailing_comma? ~ ")" }
argument = _{ named_argument | empty_argument | expression }
empty_argument = { argument_name ~ ":" }
named_argument = { argument_name ~ ":" ~ expression }
argument_name = { non_empty_identifier }
trailing_comma = @{ "," }

// ######################################
// Comments and Documentation Comments
// ######################################
comment_block = ${ ((doc_comment | comment) ~ NEWLINE?)+ }
trailing_comment = ${ doc_comment | comment }
doc_comment = { WHITESPACE* ~ "///" ~ doc_content }
comment = { WHITESPACE* ~ (!"///") ~ "//" ~ doc_content }
doc_content = @{ (!NEWLINE ~ ANY)* }

// ######################################
// shared building blocks
// ######################################
non_empty_identifier = @{ ASCII_ALPHANUMERIC ~ ( "_" | "-" | ASCII_ALPHANUMERIC)* }
path_identifier = @{ non_empty_identifier ~ ("." ~ non_empty_identifier)* }

WHITESPACE = _{ SPACE_SEPARATOR | "\t" } // tabs are also whitespace
NEWLINE = _{ "\n" | "\r\n" | "\r" }
empty_lines = @{ (WHITESPACE* ~ NEWLINE)+ }

// the any part is to not crash on comments next to an open block, see test `parse_comments_without_crasing_or_loosing_info`
BLOCK_OPEN = { "{" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
BLOCK_CLOSE = { "}" }

ENUM_KEYWORD = { "enum" }
MODEL_KEYWORD = { "model" }
TYPE_KEYWORD = { "type" }
GENERATOR_KEYWORD = { "generator" }
DATASOURCE_KEYWORD = { "datasource" }
LEGACY_COLON = { ":" }

CATCH_ALL = { (!NEWLINE ~ ANY)+ ~ NEWLINE? }
BLOCK_LEVEL_CATCH_ALL = { !BLOCK_CLOSE ~ CATCH_ALL }

// ######################################
// Expressions & Functions
// ######################################
function_name = @{ non_empty_identifier ~ ("." ~ non_empty_identifier)* }
function = { function_name ~ arguments_list }
array_expression = { "[" ~ (expression ~ ( "," ~ expression )*)? ~ "]" }
expression = { function | array_expression | numeric_literal | string_literal | constant_literal }

// ######################################
// Literals / Values
// ######################################

numeric_literal = @{ ("-")? ~ ASCII_DIGIT+ ~("." ~ ASCII_DIGIT+)? }

// String literals. We follow exactly the same grammar as JSON strings
// References:
// - https://datatracker.ietf.org/doc/html/rfc8259
// - https://www.json.org/json-en.html
ASCII_CONTROL_CHARACTER = _{ '\u{0000}'..'\u{001F}' }
string_escape = _{ "\\" ~ ANY }
string_content = @{ (string_escape | !("\"" | ASCII_CONTROL_CHARACTER) ~ ANY)* }
string_literal = ${ "\"" ~ string_content ~ "\"" }

constant_literal = @{ path_identifier }
