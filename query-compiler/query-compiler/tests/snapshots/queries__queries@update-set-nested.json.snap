---
source: query-compiler/query-compiler/tests/queries.rs
expression: pretty
input_file: query-compiler/query-compiler/tests/data/update-set-nested.json
---
transaction
   dataMap {
       id: Int (id)
       email: String (email)
       role: Enum<Role> (role)
       posts: {
           id: Int (id)
           title: String (title)
           userId: Int (userId)
       }
   }
   enums {
       Role: {
           admin: ADMIN
           user: USER
       }
   }
   let 0 = unique (query «SELECT "public"."User"."id", "public"."User"."email",
                          "public"."User"."role"::text FROM "public"."User"
                          WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2
                          OFFSET $3»
                   params [const(String("user.1737556028164@prisma.io")),
                           const(BigInt(1)), const(BigInt(0))])
   in let 0$id = mapField id (get 0)
      in let 1 = query «SELECT "public"."Post"."id", "public"."Post"."userId"
                        FROM "public"."Post" WHERE (1=1 AND
                        "public"."Post"."userId" IN [$1]) OFFSET $2»
                 params [var(0$id as Int), const(BigInt(0))]
         in let 2 = query «SELECT "public"."Post"."id" FROM "public"."Post"
                           WHERE (("public"."Post"."id" = $1 AND 1=1) OR
                           ("public"."Post"."id" = $2 AND 1=1)) OFFSET $3»
                    params [const(BigInt(11)), const(BigInt(12)),
                            const(BigInt(0))]
            in let 3 = diff (get 2) (get 1)
               in if (rowCountNeq 0 (get 3))
                  then let 0 = unique (validate (get 0)
                           [ rowCountNeq 0
                           ] orRaise "MISSING_RELATED_RECORD");
                           0$id = mapField id (get 0);
                           3$id = mapField id (get 3)
                       in sum (execute «UPDATE "public"."Post" SET "userId" = $1
                                        WHERE ("public"."Post"."id" IN [$2] AND
                                        1=1)»
                               params [var(0$id as Int), var(3$id as Int)])
                  else ();
               let 4 = diff (get 1) (get 2)
               in let 4 = validate (get 4)
                      [ rowCountEq 0
                      ] orRaise "RELATION_VIOLATION"
                  in if (rowCountNeq 0 (get 4))
                     then let 4$id = mapField id (get 4)
                          in sum (execute «UPDATE "public"."Post" SET "userId" =
                                           $1 WHERE ("public"."Post"."id" IN
                                           [$2] AND 1=1)»
                                  params [const(Null), var(4$id as Int)])
                     else ();
      let 9 = let 0 = unique (validate (get 0)
                  [ rowCountNeq 0
                  ] orRaise "MISSING_RECORD");
                  0$id = mapField id (get 0)
          in let 9 = let @parent = unique (query «SELECT "public"."User"."id",
                                                  "public"."User"."email",
                                                  "public"."User"."role"::text
                                                  FROM "public"."User" WHERE
                                                  "public"."User"."id" = $1
                                                  LIMIT $2 OFFSET $3»
                                           params [var(0$id as Int),
                                                   const(BigInt(1)),
                                                   const(BigInt(0))])
                 in let @parent$id = mapField id (get @parent)
                    in join (get @parent)
                       with (query «SELECT "public"."Post"."id",
                                    "public"."Post"."title",
                                    "public"."Post"."userId" FROM
                                    "public"."Post" WHERE
                                    "public"."Post"."userId" = $1 OFFSET $2»
                             params [var(@parent$id as Int),
                                     const(BigInt(0))]) on left.(id) = right.(userId) as posts
             in get 9
      in get 9
