---
source: query-compiler/query-compiler/tests/queries.rs
expression: pretty
input_file: query-compiler/query-compiler/tests/data/aggregate-nested-m2m.json
---
dataMap {
    posts (from @nested$posts): {
        _count (inlined): {
            categories: Int (_aggr_count_categories)
        }
    }
}
unique (let @parent = query «SELECT "public"."User"."id" FROM "public"."User"
                             WHERE "public"."User"."email"::text LIKE $1 LIMIT
                             $2 OFFSET $3»
                      params [const(String("%prisma.io%")), const(BigInt(1)),
                              const(BigInt(0))]
in let @parent$id = mapField id (get @parent)
   in join (get @parent)
      with (query «SELECT "public"."Post"."id", "public"."Post"."userId",
                   COALESCE("aggr_selection_0_Category"."_aggr_count_categories",
                   0) AS "_aggr_count_categories" FROM "public"."Post" LEFT JOIN
                   (SELECT "public"."_CategoryToPost"."B",
                   COUNT("public"."_CategoryToPost"."B") AS
                   "_aggr_count_categories" FROM "public"."Category" LEFT JOIN
                   "public"."_CategoryToPost" ON ("public"."Category"."id" =
                   "public"."_CategoryToPost"."A") WHERE
                   "public"."Category"."name"::text LIKE $1 GROUP BY
                   "public"."_CategoryToPost"."B") AS
                   "aggr_selection_0_Category" ON ("public"."Post"."id" =
                   "aggr_selection_0_Category"."B") WHERE
                   "public"."Post"."userId" IN [$2] ORDER BY
                   "public"."Post"."id" ASC OFFSET $3»
            params [const(String("%tech%")), var(@parent$id as Int),
                    const(BigInt(0))]) on left.(id) = right.(userId) as @nested$posts)
