[methods.createMigration]
description = """
Create the next migration in the migrations history. If `draft` is false and
there are no unexecutable steps, it will also apply the newly created
migration.

**Note**: This will use the shadow database on the connectors where we need
one.
"""
requestShape = "createMigrationInput"
responseShape = "createMigrationOutput"

[recordShapes.createMigrationInput]
description = "The input to the `createMigration` command."

[recordShapes.createMigrationInput.fields.draft]
description = "If true, always generate a migration, but do not apply."
shape = "bool"

[recordShapes.createMigrationInput.fields.migrationName]
description = "The user-given name for the migration. This will be used for the migration directory."
shape = "string"

[recordShapes.createMigrationInput.fields.migrationsDirectoryPath]
description = "The filesystem path of the migrations directory to use."
shape = "string"

[recordShapes.createMigrationInput.fields.prismaSchema]
description = "The Prisma schema to use as a target for the generated migration."
shape = "string"

[recordShapes.createMigrationOutput]
description = "The output of the `creatMigration` command."

[recordShapes.createMigrationOutput.fields.generatedMigrationName]
description = """
The name of the newly generated migration directory, if any.

generatedMigrationName will be null if: 

1. The migration we generate would be empty, **AND**
2. the `draft` param was not true, because in that case the engine would still generate an empty
   migration script.
"""
isNullable = true
shape = "string"
