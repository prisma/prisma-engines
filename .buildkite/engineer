#!/usr/bin/env bash

set -e

if [[ -z "$2"  ]]; then
    printf "Error: the name of the pipeline must be provided.\nExample: './engineer pipeline test'" 1>&2
    exit 1
else
    echo "We are in the $2 pipeline."
fi

# # Checks what's the diff with the previous commit, 
# # excluding some paths that do not need a run, 
# # because they do not affect tests running in Buildkite.
# GIT_DIFF=$(git diff --name-only HEAD HEAD~1 -- . ':!.github' ':!query-engine/driver-adapters/js' ':!renovate.json' ':!*.md' ':!LICENSE' ':!CODEOWNERS';)

# # $2 is either "test" or "build", depending on the pipeline
# # Example: ./.buildkite/engineer pipeline test
# # We only want to check for changes and skip in the test pipeline.
# if [[ "$2" == "test" ]]; then
#     # Checking if GIT_DIFF is empty
#     # If it's empty then it's most likely that there are changes but they are in ignored paths.
#     # So we do not start Buildkite
#     if [ -z "${GIT_DIFF}" ]; then
#         echo "No changes found for the previous commit in paths that are not ignored, this run will now be skipped."
#         exit 0
#     else
#         # Note that printf works better for displaying line returns in CI
#         printf "Changes found for the previous commit in paths that are not ignored: \n\n%s\n\nThis run will continue...\n" "${GIT_DIFF}"
#     fi
# fi

# Check OS
if [[ "$OSTYPE" == "linux-gnu" ]]; then
    OS=linux-amzn
elif [[ "$OSTYPE" == "darwin"* ]]; then
    OS=darwin
else
    echo "Unhandled OS: '$OSTYPE'"
    exit 1
fi

# Check if the system has engineer installed, if not, use a local copy.
if ! type "engineer" &> /dev/null; then
    # Setup Prisma engine build & test tool (engineer).
    curl --fail -sSL "https://prisma-engineer.s3-eu-west-1.amazonaws.com/1.60/latest/$OS/engineer.gz" --output engineer.gz
    gzip -d engineer.gz
    chmod +x engineer

    # Execute passed command and clean up
    ./engineer "$@"
    rm -rf ./engineer
else
    # Already installed on the system
    engineer "$@"
fi
