
datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model eventids {
  event_id   String   @id
  created_at DateTime @default(now()) @db.Timestamptz(6)
}

model migrate {
  version BigInt @id
}

model posts {
  id         Int       @id @default(autoincrement())
  standup_id Int
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @default(now()) @db.Timestamptz(6)
  standups   standups  @relation(fields: [standup_id], references: [id], onDelete: Cascade)
  reports    reports[]
}

model questions {
  id         Int      @id @default(autoincrement())
  standup_id Int
  order      Int      @db.SmallInt
  question   String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  standups   standups @relation(fields: [standup_id], references: [id], onDelete: Cascade)
}

model reports {
  id         Int           @id @default(autoincrement())
  user_id    Int
  standup_id Int
  post_id    Int?
  status     report_status @default(ASKED)
  questions  Json          @default("[]")
  created_at DateTime      @default(now()) @db.Timestamptz(6)
  updated_at DateTime      @default(now()) @db.Timestamptz(6)
  posts      posts?        @relation(fields: [post_id], references: [id], onDelete: Cascade)
  standups   standups      @relation(fields: [standup_id], references: [id], onDelete: Cascade)
  users      users         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id])
}

model reviews {
  id         Int         @id @default(autoincrement())
  user_id    Int
  type       review_type
  text       String
  created_at DateTime    @default(now()) @db.Timestamptz(6)
  users      users       @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model standups {
  id             Int              @id @default(autoincrement())
  team_id        Int
  name           String           @db.Citext
  time           DateTime         @db.Time(6)
  timezone       String
  channel_id     String
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @db.Timestamptz(6)
  is_threaded    Boolean          @default(false)
  posts          posts[]
  questions      questions[]
  reports        reports[]
  teams          teams            @relation(fields: [team_id], references: [id], onDelete: Cascade)
  standups_users standups_users[]

  @@unique([team_id, name])
}

model standups_users {
  standup_id       Int
  user_id          Int
  time             DateTime            @db.Time(6)
  status           standup_user_status
  is_standup_owner Boolean             @default(false)
  created_at       DateTime            @default(now()) @db.Timestamptz(6)
  updated_at       DateTime            @default(now()) @db.Timestamptz(6)
  standups         standups            @relation(fields: [standup_id], references: [id], onDelete: Cascade)
  users            users               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([standup_id, user_id])
}

model teams {
  id                   Int         @id @default(autoincrement())
  team_access_token    String      @unique
  team_slack_id        String      @unique
  bot_access_token     String      @unique
  bot_slack_id         String
  team_name            String
  scope                String[]    @default([])
  stripe_id            String?
  cost_per_user        Int         @default(100)
  minimum_monthly_cost Int         @default(0)
  trial_ends           DateTime    @default(dbgenerated("(now() + '14 days'::interval)")) @db.Timestamptz(6)
  created_at           DateTime    @default(now()) @db.Timestamptz(6)
  updated_at           DateTime    @default(now()) @db.Timestamptz(6)
  status               team_status @default(ACTIVE)
  standups             standups[]
  users                users[]
}

model users {
  id             Int              @id @default(autoincrement())
  team_id        Int
  slack_id       String
  username       String
  timezone       String
  email          String?
  first_name     String?
  last_name      String?
  avatar_url     String?
  is_team_owner  Boolean          @default(false)
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @db.Timestamptz(6)
  reports        reports[]
  reviews        reviews[]
  standups_users standups_users[]
  teams          teams            @relation(fields: [team_id], references: [id], onDelete: Cascade)

  @@unique([slack_id, team_id])
}

enum report_status {
  ASKED
  SKIP
  COMPLETE
  PENDING
}

enum review_type {
  REFERRED_BY
  COMMENT
  EXIT_FEEDBACK
}

enum standup_user_status {
  ACTIVE
  INACTIVE
  INVITED
}

enum team_status {
  ACTIVE
  INACTIVE
  DELINQUENT
}


// introspectionSchemaVersion: NonPrisma 

