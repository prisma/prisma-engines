name: Build Linux
on:
  workflow_dispatch:
    inputs:
      commit:
        description: "Commit on the given branch to build"
        required: false

jobs:
  build:
    name: "Linux engines build `${{ matrix.target.name }}` on branch ${{ github.event.ref }} for commit ${{ github.event.inputs.commit }}"
    env:
      # default build config
      SQLITE_MAX_VARIABLE_NUMBER: 250000
      SQLITE_MAX_EXPR_DEPTH: 10000

    runs-on: ubuntu-latest

    strategy:
        fail-fast: false
        matrix:
          # database:
          #   - name: 'vitess_5_7'
          #     single_threaded: true
          #     connector: 'vitess'
          #     version: '5.7'
          #   - name: 'vitess_8_0'
          #     single_threaded: true
          #     connector: 'vitess'
          #     version: '8.0'
          #   - name: 'postgres15'
          #     single_threaded: true
          #     connector: 'postgres'
          #     version: '15'
          #   - name: 'mssql_2022'
          #     single_threaded: false
          #     connector: 'sqlserver'
          #     version: '2022'
          #   - name: 'mongodb_4_2'
          #     single_threaded: true
          #     connector: 'mongodb'
          #     version: '4.2'
          #   - name: 'cockroach_23_1'
          #     single_threaded: false
          #     connector: 'cockroachdb'
          #     version: '23.1'
          #   - name: 'cockroach_22_2'
          #     single_threaded: false
          #     connector: 'cockroachdb'
          #     version: '22.2'
          #   - name: 'cockroach_22_1_0'
          #     single_threaded: false
          #     connector: 'cockroachdb'
          #     version: '22.1'
          # engine_protocol: [graphql, json]
          target:
            - name: "Linux Glibc [1.0.x]"
              command: 'docker run -e SQLITE_MAX_VARIABLE_NUMBER=250000 -e SQLITE_MAX_EXPR_DEPTH=10000 -e LIBZ_SYS_STATIC=1 -w /root/build -v /var/lib/buildkite-agent/builds/buildkite-i-0a42451c0baafbdc8-1/prisma/release-prisma-engines:/root/build prismagraphql/build:rhel-libssl1.0.x bash -c "cargo clean && cargo build --release -p query-engine --manifest-path query-engine/query-engine/Cargo.toml --features vendored-openssl && cargo build --release -p query-engine-node-api --manifest-path query-engine/query-engine-node-api/Cargo.toml --features vendored-openssl && cargo build --release -p schema-engine-cli --manifest-path schema-engine/cli/Cargo.toml --features vendored-openssl && cargo build --release -p prisma-fmt --manifest-path prisma-fmt/Cargo.toml --features vendored-openssl"'
            # - name: "Linux Glibc [1.1.x]"
            # - name: "Linux Glibc [3.0.x]"
            # - name: "Linux Musl [1.1.x]"
            # - name: "Linux Musl [3.0.x]"
            # - name: "Linux Static x86_64"
            # - name: "Linux ARM64 [1.0.x]"
            # - name: "Linux ARM64 [1.1.x]"
            # - name: "Linux ARM64 [3.0.x]"
            # - name: "Linux Musl ARM64 [1.1.x]"
            # - name: "Linux Musl ARM64 [3.0.x]"
            # - name: "Linux Static ARM64"

    steps:
      - name: Output link to real commit
        if: ${{ github.event.inputs.commit }}
        run: echo https://${{ github.repository }}/commit/${{ github.event.inputs.commit }}

      - name: Checkout ${{ github.event.inputs.commit }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commit }}

      - uses: dtolnay/rust-toolchain@stable

      # TODO proper way to do cache?
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-intel-cargo-${{ hashFiles('**/Cargo.lock') }}

      - run: |
          # TODO check if .finished already exists
          ${{ matrix.target.command }}
          # TODO Compressing binary files
          # TODO do things with prismagraphql/build:release image
          #   upload artifacts
          #   verify uploaded artifacts

      - uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: |
            ${{ github.workspace }}/target/release/schema-engine
            ${{ github.workspace }}/target/release/prisma-fmt
            ${{ github.workspace }}/target/release/query-engine
            ${{ github.workspace }}/target/release/libquery_engine.dylib
