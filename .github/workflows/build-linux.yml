name: Build Linux
on:
  workflow_dispatch:
    inputs:
      commit:
        description: "Commit on the given branch to build"
        required: false
  pull_request:

jobs:
  build:
    name: "${{ matrix.target.name }} (on branch ${{ github.event.ref }} for commit ${{ github.event.inputs.commit }})"
    # env:
    #   # default build config
    #   SQLITE_MAX_VARIABLE_NUMBER: 250000
    #   SQLITE_MAX_EXPR_DEPTH: 10000

    runs-on: ubuntu-latest

    strategy:
        fail-fast: false
        matrix:
          target:
            # Linux Glibc
            - name: "Linux Glibc [1.0.x]"
              image: 'prismagraphql/build:rhel-libssl1.0.x'
              target_string: ''
              features_string: '--features vendored-openssl'
            - name: "Linux Glibc [1.1.x]"
              image: 'prismagraphql/build:rhel-libssl1.1.x'
              target_string: ''
              features_string: ''
            - name: "Linux Glibc [3.0.x]"
              image: 'prismagraphql/build:rhel-libssl3.0.x'
              target_string: ''
              features_string: ''
            # Linux Musl
            - name: "Linux Musl [1.1.x]"
              image: 'prismagraphql/build:alpine-libssl1.1.x'
              target_string: ''
              features_string: ''
            - name: "Linux Musl [3.0.x]"
              image: 'prismagraphql/build:alpine-libssl3.0.x'
              target_string: ''
              features_string: ''
            # Linux Static
            - name: "Linux Static x86_64"
              image: 'prismagraphql/build:linux-static-x64'
              target_string: '--target aarch64-unknown-linux-musl'
              features_string: '--features vendored-openssl'
            # Linux Arm64 Glibc
            - name: "Linux ARM64 [1.0.x]"
              image: 'prismagraphql/build:cross-linux-arm-ssl-1.0.x'
              target_string: '--target aarch64-unknown-linux-gnu'
              features_string: '--features vendored-openssl'
            - name: "Linux ARM64 [1.1.x]"
              image: 'prismagraphql/build:cross-linux-arm-ssl-1.1.x'
              target_string: '--target aarch64-unknown-linux-gnu'
              features_string: ''
            - name: "Linux ARM64 [3.0.x]"
              image: 'prismagraphql/build:cross-linux-arm-ssl-3.0.x'
              target_string: '--target aarch64-unknown-linux-gnu'
              features_string: ''
            # Linux Arm64 Musl
            - name: "Linux Musl ARM64 [1.1.x]"
              image: 'prismagraphql/build:cross-linux-musl-arm-ssl-1.1.x'
              target_string: '--target aarch64-unknown-linux-musl'
              features_string: ''
            - name: "Linux Musl ARM64 [3.0.x]"
              image: 'prismagraphql/build:cross-linux-musl-arm-ssl-3.0.x'
              target_string: '--target aarch64-unknown-linux-musl'
              features_string: ''
            # Linux Arm64 Static
            - name: "Linux Static ARM64"
              image: 'prismagraphql/build:linux-static-arm64'
              target_string: '--target aarch64-unknown-linux-musl'
              features_string: '--features vendored-openssl'

    steps:
      - name: Output link to real commit
        if: ${{ github.event.inputs.commit }}
        run: echo https://${{ github.repository }}/commit/${{ github.event.inputs.commit }}

      - name: Checkout ${{ github.event.inputs.commit }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commit }}

      - uses: dtolnay/rust-toolchain@stable

      # TODO proper way to do cache?
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-intel-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Construct Build Command
        id: construct_build_command
        run: |
          echo "COMMAND=docker run \
            -e SQLITE_MAX_VARIABLE_NUMBER=250000 \
            -e SQLITE_MAX_EXPR_DEPTH=10000 \
            -e LIBZ_SYS_STATIC=1 \
            -w /root/build \
            -v \"$(pwd)\":/root/build \
            ${{ matrix.target.image }} \
            bash -c \
              \" \
              cargo clean \
              && cargo build --release -p query-engine          --manifest-path query-engine/query-engine/Cargo.toml          ${{ matrix.target.target_string }} ${{ matrix.target.features_string }} \
              && cargo build --release -p query-engine-node-api --manifest-path query-engine/query-engine-node-api/Cargo.toml ${{ matrix.target.target_string }} ${{ matrix.target.features_string }} \
              && cargo build --release -p schema-engine-cli     --manifest-path schema-engine/cli/Cargo.toml                  ${{ matrix.target.target_string }} ${{ matrix.target.features_string }} \
              && cargo build --release -p prisma-fmt            --manifest-path prisma-fmt/Cargo.toml                         ${{ matrix.target.target_string }} ${{ matrix.target.features_string }} \
              \" \
            " >> $GITHUB_OUTPUT
      - name: Show Build Command
        env:
          COMMAND: ${{ steps.construct_build_command.outputs.COMMAND }}"
        run: echo "Build command is $COMMAND

      - run: |
          # TODO check if .finished already exists

          ${{ steps.construct_build_command.outputs.command }}
          
          # TODO Compressing binary files
          # TODO do things with prismagraphql/build:release image
          #   upload artifacts
          #   verify uploaded artifacts

      - uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: |
            ${{ github.workspace }}/target/release/schema-engine
            ${{ github.workspace }}/target/release/prisma-fmt
            ${{ github.workspace }}/target/release/query-engine
            ${{ github.workspace }}/target/release/libquery_engine.dylib
