on:
  workflow_call:
    inputs:
      name:
        type: string
        required: true
      connector:
        type: string
        required: true
      version:
        type: string
        required: true
      ubuntu:
        type: string
        default: 'latest'
      threads:
        type: number
        default: 1
      relation_load_strategy:
        type: string
        default: '["join", "query"]'

jobs:
  rust-query-engine-tests:
    name: '${{ matrix.engine_protocol }} ${{ matrix.relation_load_strategy }} ${{ matrix.partition }}'

    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        engine_protocol: [graphql, json]
        relation_load_strategy: ${{ fromJson(inputs.relation_load_strategy) }}
        partition: ['1/4', '2/4', '3/4', '4/4']

    env:
      LOG_LEVEL: 'info'
      LOG_QUERIES: 'y'
      RUST_LOG_FORMAT: 'devel'
      RUST_BACKTRACE: '1'
      CLICOLOR_FORCE: '1'
      CLOSED_TX_CLEANUP: '2'
      SIMPLE_TEST_MODE: '1'
      QUERY_BATCH_SIZE: '10'
      TEST_RUNNER: 'direct'
      TEST_CONNECTOR: ${{ inputs.connector }}
      TEST_CONNECTOR_VERSION: ${{ inputs.version }}
      PRISMA_ENGINE_PROTOCOL: ${{ matrix.engine_protocol }}
      PRISMA_RELATION_LOAD_STRATEGY: ${{ matrix.relation_load_strategy }}
      WORKSPACE_ROOT: ${{ github.workspace }}

    runs-on: 'ubuntu-${{ inputs.ubuntu }}'
    steps:
      - uses: actions/checkout@v4

      - name: Create ramdisk
        uses: ./.github/workflows/include/setup-ramdisk

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-key: 'ubuntu-${{ inputs.ubuntu }}'

      - uses: taiki-e/install-action@nextest

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        continue-on-error: true
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        if: "${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}"
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Docker images.
        uses: ScribeMD/docker-cache@0.5.0
        with:
          key: docker-${{ inputs.name }}-${{hashFiles('docker-compose.yaml')}}

      - name: 'Start ${{ inputs.name }} (${{ matrix.engine_protocol }})'
        run: make start-${{ inputs.name }}

      - name: Use custom Nextest config if it exists
        run: |
          CUSTOM_NEXTEST_CONFIG=".config/nextest.$TEST_CONNECTOR.toml"
          if [[ -e "$CUSTOM_NEXTEST_CONFIG" ]]; then
            echo "Using custom Nextest config: $CUSTOM_NEXTEST_CONFIG"
            mv -f "$CUSTOM_NEXTEST_CONFIG" .config/nextest.toml
          else
            echo 'Using common Nextest config: .config/nextest.toml'
          fi

      - run: cargo nextest run -p query-engine-tests --partition hash:${{ matrix.partition }} --test-threads=${{ inputs.threads }}
        env:
          CLICOLOR_FORCE: 1
