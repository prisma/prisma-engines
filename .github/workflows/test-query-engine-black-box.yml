name: "QE: black-box tests"
on:
  push:
    branches:
      - main
  pull_request:
    paths-ignore:
      - "!.github/workflows/test-query-engine-black-box.yml"
      - ".github/**"
      - ".buildkite/**"
      - "*.md"
      - "LICENSE"
      - "CODEOWNERS"
      - "renovate.json"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        database:
          - name: "postgres16"
            single_threaded: false
            connector: "postgres"
            # Arbitrary PostgreSQL version
            # we opted for the most recent one, there is no need to have a matrix
            version: "16"

    env:
      LOG_LEVEL: "info"
      LOG_QUERIES: "y"
      RUST_LOG_FORMAT: "devel"
      RUST_BACKTRACE: "1"
      CLICOLOR_FORCE: "1"
      CLOSED_TX_CLEANUP: "2"
      SIMPLE_TEST_MODE: "1"
      QUERY_BATCH_SIZE: "10"
      TEST_RUNNER: "direct"
      TEST_CONNECTOR: ${{ matrix.database.connector }}
      TEST_CONNECTOR_VERSION: ${{ matrix.database.version }}

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        continue-on-error: true
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        if: "${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}"
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "Start ${{ matrix.database.name }} (${{ matrix.engine_protocol }})"
        run: make start-${{ matrix.database.name }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1

      - run: export WORKSPACE_ROOT=$(pwd) && cargo build --package query-engine
        env:
          CLICOLOR_FORCE: 1

      - run: export WORKSPACE_ROOT=$(pwd) && cargo test --package black-box-tests -- --test-threads=1
        env:
          CLICOLOR_FORCE: 1
