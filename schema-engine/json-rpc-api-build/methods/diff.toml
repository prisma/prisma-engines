[methods.diff]
description = """
Compares two databases schemas from two arbitrary sources, and display the
difference as either a human-readable summary, or an executable script that can
be passed to dbExecute.

Connection to a shadow database is only necessary when either the `from` or the
`to` params is a migrations directory.

Diffs have a _direction_. Which source is `from` and which is `to` matters. The
resulting diff should be thought as a migration from the schema in `from` to
the schema in `to`.

By default, we output a human-readable diff. If you want an executable script,
pass the `"script": true` param.
"""
requestShape = "diffParams"
responseShape = "diffResult"

[recordShapes.diffParams]
description = "The type of params for the `diff` method."
# Example: generate a new migration
example = """
{
    "from": {
        "tag": "migrations",
        "path": "./prisma/migrations"
    },
    "to": {
        "tag": "schemaDatamodel",
        "schema": "./prisma/schema.prisma",
    }
    "shadowDatabaseUrl": "mysql://test/test"
}
"""

[recordShapes.diffParams.fields.from]
description = """
The source of the schema to consider as a _starting point_.
"""
shape = "DiffTarget"

[recordShapes.diffParams.fields.to]
description = """
The source of the schema to consider as a _destination_, or the desired
end-state.
"""
shape = "DiffTarget"

[recordShapes.diffParams.fields.shadowDatabaseUrl]
description = """
The URL to a live database to use as a shadow database. The schema and data on
that database will be wiped during diffing.

This is only necessary when one of `from` or `to` is referencing a migrations
directory as a source for the schema.
"""
isNullable = true
shape = "string"

[recordShapes.diffParams.fields.script]
description = """
By default, the response will contain a human-readable diff. If you want an
executable script, pass the `"script": true` param.
"""
shape = "bool"

[recordShapes.diffParams.fields.exitCode]
description = """
Whether the --exit-code param was passed.

If this is set, the engine will return exitCode = 2 in the diffResult in case the diff is
non-empty. Other than this, it does not change the behaviour of the command.
"""
isNullable = true
shape = "bool"

[recordShapes.diffResult]
description = "The result type for the `diff` method."

[recordShapes.diffResult.fields.exitCode]
description = "The exit code that the CLI should return."
shape = "u32"

[enumShapes.DiffTarget]
description  = "A supported source for a database schema to diff in the `diff` command."

[enumShapes.DiffTarget.variants.empty]
description = "An empty schema."

[enumShapes.DiffTarget.variants.schemaDatasource]
description = """
The path to a Prisma schema. The _datasource url_ will be considered, and the
live database it points to introspected for its schema.
"""
shape = "SchemaContainer"

[enumShapes.DiffTarget.variants.schemaDatamodel]
description = """
The path to a Prisma schema. The contents of the schema itself will be
considered. This source does not need any database connection.
"""
shape = "SchemaContainer"

[enumShapes.DiffTarget.variants.url]
description = """
The url to a live database. Its schema will be considered.

This will cause the migration engine to connect to the database and read from
it. It will not write.
"""
shape = "UrlContainer"

[enumShapes.DiffTarget.variants.migrations]
description = """
The path to a migrations directory of the shape expected by Prisma Migrate. The
migrations will be applied to a **shadow database**, and the resulting schema
considered for diffing.
"""
shape = "PathContainer"

[recordShapes.PathContainer]
fields.path.shape = "string"
